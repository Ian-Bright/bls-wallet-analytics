// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class WalletCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WalletCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WalletCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WalletCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): WalletCreatedEntity | null {
    return changetype<WalletCreatedEntity | null>(
      store.get("WalletCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get publicKey(): Array<BigInt> {
    let value = this.get("publicKey");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set publicKey(value: Array<BigInt>) {
    this.set("publicKey", Value.fromBigIntArray(value));
  }
}

export class WalletOperationProcessedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WalletOperationProcessedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WalletOperationProcessedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WalletOperationProcessedEntity", id.toString(), this);
    }
  }

  static load(id: string): WalletOperationProcessedEntity | null {
    return changetype<WalletOperationProcessedEntity | null>(
      store.get("WalletOperationProcessedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wallet(): Bytes {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set wallet(value: Bytes) {
    this.set("wallet", Value.fromBytes(value));
  }

  get nonce(): BigInt {
    let value = this.get("nonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nonce(value: BigInt) {
    this.set("nonce", Value.fromBigInt(value));
  }

  get success(): boolean {
    let value = this.get("success");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get results(): Array<Bytes> {
    let value = this.get("results");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set results(value: Array<Bytes>) {
    this.set("results", Value.fromBytesArray(value));
  }

  get actionsNonce(): Array<BigInt> {
    let value = this.get("actionsNonce");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set actionsNonce(value: Array<BigInt>) {
    this.set("actionsNonce", Value.fromBigIntArray(value));
  }

  get actionsRecipients(): Array<Bytes> {
    let value = this.get("actionsRecipients");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set actionsRecipients(value: Array<Bytes>) {
    this.set("actionsRecipients", Value.fromBytesArray(value));
  }

  get actionsData(): Array<Bytes> {
    let value = this.get("actionsData");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set actionsData(value: Array<Bytes>) {
    this.set("actionsData", Value.fromBytesArray(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get numActions(): BigInt {
    let value = this.get("numActions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numActions(value: BigInt) {
    this.set("numActions", Value.fromBigInt(value));
  }

  get actionsMethodIds(): Array<Bytes> {
    let value = this.get("actionsMethodIds");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set actionsMethodIds(value: Array<Bytes>) {
    this.set("actionsMethodIds", Value.fromBytesArray(value));
  }
}

export class BlsWalletStatsSumsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BlsWalletStatsSumsEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlsWalletStatsSumsEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlsWalletStatsSumsEntity", id.toString(), this);
    }
  }

  static load(id: string): BlsWalletStatsSumsEntity | null {
    return changetype<BlsWalletStatsSumsEntity | null>(
      store.get("BlsWalletStatsSumsEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get numWalletsCreated(): BigInt {
    let value = this.get("numWalletsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numWalletsCreated(value: BigInt) {
    this.set("numWalletsCreated", Value.fromBigInt(value));
  }

  get numOperationsFailed(): BigInt {
    let value = this.get("numOperationsFailed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numOperationsFailed(value: BigInt) {
    this.set("numOperationsFailed", Value.fromBigInt(value));
  }

  get numOperationsSubmitted(): BigInt {
    let value = this.get("numOperationsSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numOperationsSubmitted(value: BigInt) {
    this.set("numOperationsSubmitted", Value.fromBigInt(value));
  }

  get numWalletsRecovered(): BigInt {
    let value = this.get("numWalletsRecovered");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numWalletsRecovered(value: BigInt) {
    this.set("numWalletsRecovered", Value.fromBigInt(value));
  }

  get numBundlesSubmitted(): BigInt {
    let value = this.get("numBundlesSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numBundlesSubmitted(value: BigInt) {
    this.set("numBundlesSubmitted", Value.fromBigInt(value));
  }

  get numActionsSubmitted(): BigInt {
    let value = this.get("numActionsSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numActionsSubmitted(value: BigInt) {
    this.set("numActionsSubmitted", Value.fromBigInt(value));
  }
}

export class ProcessedTransactionEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProcessedTransactionEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProcessedTransactionEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProcessedTransactionEntity", id.toString(), this);
    }
  }

  static load(id: string): ProcessedTransactionEntity | null {
    return changetype<ProcessedTransactionEntity | null>(
      store.get("ProcessedTransactionEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get numOperations(): BigInt {
    let value = this.get("numOperations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numOperations(value: BigInt) {
    this.set("numOperations", Value.fromBigInt(value));
  }
}

export class BlsWalletStatsTSEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BlsWalletStatsTSEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BlsWalletStatsTSEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BlsWalletStatsTSEntity", id.toString(), this);
    }
  }

  static load(id: string): BlsWalletStatsTSEntity | null {
    return changetype<BlsWalletStatsTSEntity | null>(
      store.get("BlsWalletStatsTSEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get day(): BigInt {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set day(value: BigInt) {
    this.set("day", Value.fromBigInt(value));
  }

  get numWalletsCreated(): BigInt {
    let value = this.get("numWalletsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numWalletsCreated(value: BigInt) {
    this.set("numWalletsCreated", Value.fromBigInt(value));
  }

  get numOperationsFailed(): BigInt {
    let value = this.get("numOperationsFailed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numOperationsFailed(value: BigInt) {
    this.set("numOperationsFailed", Value.fromBigInt(value));
  }

  get numOperationsSubmitted(): BigInt {
    let value = this.get("numOperationsSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numOperationsSubmitted(value: BigInt) {
    this.set("numOperationsSubmitted", Value.fromBigInt(value));
  }

  get numWalletsRecovered(): BigInt {
    let value = this.get("numWalletsRecovered");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numWalletsRecovered(value: BigInt) {
    this.set("numWalletsRecovered", Value.fromBigInt(value));
  }

  get numBundlesSubmitted(): BigInt {
    let value = this.get("numBundlesSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numBundlesSubmitted(value: BigInt) {
    this.set("numBundlesSubmitted", Value.fromBigInt(value));
  }

  get numActionsSubmitted(): BigInt {
    let value = this.get("numActionsSubmitted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set numActionsSubmitted(value: BigInt) {
    this.set("numActionsSubmitted", Value.fromBigInt(value));
  }
}
